{"version":3,"sources":["webpack:///bundle.js","webpack:///webpack/bootstrap 9ff512ce1e30683e25ef","webpack:///external \"THREE\"","webpack:///./src/o3d/vox.ts","webpack:///./~/howler/dist/howler.js","webpack:///./src/JTreeEntity.ts","webpack:///./src/cinematiccontroller.ts","webpack:///./src/o3d/ai.ts","webpack:///./src/content/character/character.toml","webpack:///./src/content/character/dinomite.toml","webpack:///./src/content/character/dinostrip.toml","webpack:///./src/content/testlevel.toml","webpack:///./src/index.ts","webpack:///./src/lib/input.ts","webpack:///./src/lib/joshuatree.ts","webpack:///./src/soundfx.ts","webpack:///./~/path-browserify/index.js","webpack:///./~/process/browser.js","webpack:///(webpack)/buildin/global.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","THREE","__extends","this","extendStatics","setPrototypeOf","__proto__","Array","b","__","constructor","create","__assign","assign","t","arguments","length","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","verb","v","op","f","TypeError","_","y","label","ops","pop","trys","push","sent","throw","return","path","parser","vox","Parser","VoxModel","_super","voxData","_this","data","animations","keys","animation","forEach","key","anim","map","file","parse","join","voxelBin","builder","MeshBuilder","voxelSize","size","mesh","createMesh","castShadow","receiveShadow","voxHolder","Object3D","position","fromArray","rotation","x","Math","PI","add","play","default","timeout","clearInterval","current","frame","setInterval","bind","speed","stop","clearTimeout","voxList","_a","children","remove","global","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","HowlerGlobal","init","self","Howler","_counter","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","window","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","mobileAutoEnable","_setup","volume","vol","parseFloat","setupAudioContext","gain","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","unload","close","codecs","ext","replace","state","_autoSuspend","Audio","test","oncanplaythrough","_setupCodecs","audioTest","err","canPlayType","mpegTest","checkOpera","userAgent","match","isOldOpera","parseInt","split","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","mp4","weba","webm","dolby","flac","_enableMobileAudio","isMobile","isTouch","maxTouchPoints","msMaxTouchPoints","_mobileEnabled","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","source","createBufferSource","buffer","connect","destination","start","noteOn","onended","disconnect","document","removeEventListener","addEventListener","suspend","_sounds","_paused","_suspendTimer","setTimeout","_resumeAfterSuspend","_autoResume","resume","_emit","Howl","src","console","error","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","undefined","_duration","_state","_endTimers","_queue","_onend","onend","fn","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onresume","event","action","load","url","str","exec","toLowerCase","warn","location","protocol","slice","Sound","loadBuffer","internal","id","num","_ended","_id","_inactiveSound","seek","max","_seek","duration","abs","_start","_stop","node","playWebAudio","_refreshBuffer","setValueAtTime","currentTime","_playStart","bufferSource","noteGrainOn","Infinity","isRunning","once","_clearTimer","playHtml5","playbackRate","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","args","indexOf","fade","from","to","len","diff","dir","steps","stepLen","ceil","end","linearRampToValueAtTime","_interval","soundId","min","round","cancelScheduledValues","loopStart","loopEnd","index","realTime","playing","rateSeek","sounds","_errorFn","_loadFn","splice","remCache","cache","on","events","off","isArray","msg","_loadQueue","task","shift","_drain","reset","limit","cnt","_panner","howl","_parent","parent","createGain","createGainNode","paused","_errorListener","_loadListener","code","__default","loadSound","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","xhr","XMLHttpRequest","open","responseType","status","response","onerror","safeXhrSend","send","arraybuffer","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","standalone","_pos","_orientation","stereo","pan","pos","z","setPosition","orientation","xUp","yUp","zUp","or","setOrientation","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_panningModel","_refDistance","_rolloffFactor","pa","panner","type","createPanner","joshuatree_1","maxNum","Uint64","zeroNum","JTreeIterationData","Vector3","JTreeEntity","material","mergedGeometry","mergedMeshes","spawnMergeCubes","generateJTree","jtree","JoshuaTree","generateJTree_internal","root","depth","jchild","Add","generateJTreeSphere","center","radius","generateJTreeSphere_internal","pointWithinSphere","point","dvec","copy","sub","calculateCorners","corner","extent","corners","cornerRUF","cornerLUF","cornerRDF","cornerLDF","cornerRUB","cornerLUB","cornerRDB","cornerLDB","rootPosition","childVoxExtent","getScaledExtent","this_1","voxCorner","indexToScaledRelativePosition","totallyWithinSphere","totallyOutsideSphere","currentValue","array","Copy","scalePower","pow","indexToRelativePosition","floor","relPos","leafLoop","offset","bitFlag","Set","minExtent","And","Empty","nodeParent","nodeKey","depthLoop","targetNodeList","shouldTraverseNode_1","heirKey_1","getHeirarchyIndexByNode","voxExtent","Equals","nodeRef","childKey","child","toff","keynum","newGeometry","BoxGeometry","newGeomTransform","Matrix4","makeTranslation","myMeshIndex","getHeirarchyIndexByIndexAndParent","Geometry","merge","spawnCubes","Mesh","calculateCenterOfMass","centerOfMass","totalMass","sideLen","mass","weightedPos","multiplyScalar","divideScalar","parentNode","maxdepth","shifted","detachSubtreeSphere","indicesToRerasterize","Remove","heirInd","includes","log","input_1","soundfx_1","CinematicController","camera","cameraInitialPos","camSwayVerticalSpeed","camSwayVerticalMagnitude","camSwayHorizontalSpeed","camSwayHorizontalMagnitude","camSwayTime","inputSound","tick","dt","newPosition","sin","vox_1","rand","random","Ai","clock","Clock","newTarget","lerp","target","distance","delta","getDelta","lookAt","requestAnimationFrame","idle","walk","time","JTreeEntity_1","cinematiccontroller_1","ai_1","charData","testLevel","dinoMite","dinostrip","scene","Scene","PerspectiveCamera","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","setSize","appendChild","domElement","controls","Vector4","MeshPhongMaterial","color","sphereCenter","o3d","set","light","DirectionalLight","AmbientLight","soundFired","music","render","keyCode","mouse","clientX","clientY","w","h","xp","yp","left","right","Uint32Array","Xor","Not","Or","Unset","FromJSON","json","treeClass","numKey","ToJSON","JSON","stringify","force","ForEach","howler_1","SoundFX","sfx","process","normalizeArray","parts","allowAboveRoot","up","last","unshift","filter","xs","res","splitPathRe","splitPath","filename","resolvedPath","resolvedAbsolute","cwd","charAt","normalize","isAbsolute","trailingSlash","substr","paths","relative","trim","arr","fromParts","toParts","samePartsLength","outputParts","concat","sep","delimiter","dirname","basename","extname","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","runClearTimeout","marker","cachedClearTimeout","cleanUpNextTick","draining","currentQueue","queue","queueIndex","drainQueue","run","Item","noop","nextTick","title","browser","env","argv","versions","addListener","removeListener","removeAllListeners","emit","binding","chdir","umask","g","Function","eval"],"mappings":"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","file":"bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 10);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = THREE;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;\r\n    return { next: verb(0), \"throw\": verb(1), \"return\": verb(2) };\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar path = __webpack_require__(14);\r\nvar THREE = __webpack_require__(0);\r\nvar parser = new vox.Parser();\r\nvar VoxModel = (function (_super) {\r\n    __extends(VoxModel, _super);\r\n    function VoxModel(voxData) {\r\n        var _this = _super.call(this) || this;\r\n        _this.data = voxData;\r\n        var dir = './vox';\r\n        _this.animations = {};\r\n        Object.keys(_this.data.animation).forEach(function (key) {\r\n            var anim = _this.data.animation[key];\r\n            _this.animations[key] = __assign({}, anim, { vox: anim.vox.map(function (file) { return parser.parse(path.join(dir, file)).then(function (voxelBin) {\r\n                    var builder = new vox.MeshBuilder(voxelBin, { voxelSize: voxData.size });\r\n                    var mesh = builder.createMesh();\r\n                    mesh.castShadow = true;\r\n                    mesh.receiveShadow = true;\r\n                    return mesh;\r\n                }); }) });\r\n        });\r\n        _this.voxHolder = new THREE.Object3D();\r\n        if (voxData.position)\r\n            _this.voxHolder.position.fromArray(voxData.position);\r\n        if (voxData.rotation)\r\n            _this.voxHolder.rotation.fromArray(voxData.rotation.map(function (x) { return x * Math.PI / 180; }));\r\n        _this.add(_this.voxHolder);\r\n        _this.play(_this.data.default);\r\n        return _this;\r\n    }\r\n    VoxModel.prototype.play = function (animation) {\r\n        if (this.timeout)\r\n            clearInterval(this.timeout);\r\n        this.current = animation;\r\n        this.frame = 0;\r\n        this.timeout = setInterval(this.step.bind(this), this.animations[animation].speed);\r\n    };\r\n    VoxModel.prototype.stop = function () {\r\n        clearTimeout(this.timeout);\r\n    };\r\n    VoxModel.prototype.step = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var voxList, mesh;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        if (this.voxHolder.children[0])\r\n                            this.voxHolder.remove(this.voxHolder.children[0]);\r\n                        voxList = this.animations[this.current].vox;\r\n                        return [4 /*yield*/, voxList[this.frame]];\r\n                    case 1:\r\n                        mesh = _a.sent();\r\n                        this.voxHolder.add(mesh);\r\n                        this.frame = this.frame + 1 === voxList.length ? this.frame = 0 : this.frame + 1;\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return VoxModel;\r\n}(THREE.Object3D));\r\nexports.default = VoxModel;\r\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n *  howler.js v2.0.3\n *  howlerjs.com\n *\n *  (c) 2013-2017, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 0;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto iOS enabler.\n      self.mobileAutoEnable = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.value = vol;\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.value = muted ? 0 : self._volume;\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'running' : 'running';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Mobile browsers will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _enableMobileAudio: function() {\n      var self = this || Howler;\n\n      // Only run this on mobile devices if audio isn't already eanbled.\n      var isMobile = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(self._navigator && self._navigator.userAgent);\n      var isTouch = !!(('ontouchend' in window) || (self._navigator && self._navigator.maxTouchPoints > 0) || (self._navigator && self._navigator.msMaxTouchPoints > 0));\n      if (self._mobileEnabled || !self.ctx || (!isMobile && !isTouch)) {\n        return;\n      }\n\n      self._mobileEnabled = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function() {\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._mobileEnabled = true;\n          self.mobileAutoEnable = false;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchend', unlock, true);\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchend', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n        self.ctx.suspend().then(function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        });\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended') {\n        self.state = 'resuming';\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio on iOS.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.mobileAutoEnable) {\n        Howler._enableMobileAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload) {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        var num = 0;\n        for (var i=0; i<self._sounds.length; i++) {\n          if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n            num++;\n            id = self._sounds[i]._id;\n          }\n        }\n\n        if (num === 1) {\n          sprite = null;\n        } else {\n          id = null;\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If we have no sprite and the sound hasn't loaded, we must wait\n      // for the sound to load to get our audio's duration.\n      if (self._state !== 'loaded' && !self._sprite[sprite]) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(self._soundById(sound._id) ? sound._id : undefined);\n          }\n        });\n\n        return sound._id;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          setTimeout(function() {\n            self._emit('play', sound._id);\n          }, 0);\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n      // Update the parameters of the sound\n      sound._paused = false;\n      sound._ended = false;\n      sound._sprite = sprite;\n      sound._seek = seek;\n      sound._start = self._sprite[sprite][0] / 1000;\n      sound._stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n            }, 0);\n          }\n        };\n\n        var isRunning = (Howler.state === 'running');\n        if (self._state === 'loaded' && isRunning) {\n          playWebAudio();\n        } else {\n          // Wait for the audio to load and then begin playback.\n          var event = !isRunning && self._state === 'loaded' ? 'resume' : 'load';\n          self.once(event, playWebAudio, isRunning ? sound._id : null);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n          node.play();\n\n          // Setup the new end timer.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            self._emit('play', sound._id);\n          }\n        };\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (self._state === 'loaded' && (window && window.ejecta || !node.readyState && Howler._navigator.isCocoonJS));\n        if (node.readyState === 4 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // make sure the sound has been created\n              if (!sound._node.bufferSource) {\n                return self;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // make sure the sound has been created\n              if (!sound._node.bufferSource) {\n                if (!internal) {\n                  self._emit('stop', sound._id);\n                }\n\n                return self;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n            }\n          }\n        }\n\n        if (sound && !internal) {\n          self._emit('stop', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded') {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n      var diff = Math.abs(from - to);\n      var dir = from > to ? 'out' : 'in';\n      var steps = diff / 0.01;\n      var stepLen = (steps > 0) ? len / steps : len;\n\n      // Since browsers clamp timeouts to 4ms, we need to clamp our steps to that too.\n      if (stepLen < 4) {\n        steps = Math.ceil(steps / (4 / stepLen));\n        stepLen = 4;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          var vol = from;\n          sound._interval = setInterval(function(soundId, sound) {\n            // Update the volume amount, but only if the volume should change.\n            if (steps > 0) {\n              vol += (dir === 'in' ? 0.01 : -0.01);\n            }\n\n            // Make sure the volume is in the right bounds.\n            vol = Math.max(0, vol);\n            vol = Math.min(1, vol);\n\n            // Round to within 2 decimal points.\n            vol = Math.round(vol * 100) / 100;\n\n            // Change the volume.\n            if (self._webAudio) {\n              if (typeof id === 'undefined') {\n                self._volume = vol;\n              }\n\n              sound._volume = vol;\n            } else {\n              self.volume(vol, soundId, true);\n            }\n\n            // When the fade is complete, stop it and fire event.\n            if ((to < from && vol <= to) || (to > from && vol >= to)) {\n              clearInterval(sound._interval);\n              sound._interval = null;\n              self.volume(to, soundId);\n              self._emit('fade', soundId);\n            }\n          }.bind(self, ids[i], sound), stepLen);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded') {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            sound._rateSeek = self.seek(id[i]);\n            sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.value = rate;\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Restart the playback if the sound was playing.\n          if (playing) {\n            self.play(id, true);\n          }\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node) {\n            sound._node.currentTime = seek;\n          }\n\n          self._emit('seek', id);\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading.\n          sounds[i]._node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n\n        // Remove the references in the global Howler object.\n        var index = Howler._howls.indexOf(self);\n        if (index >= 0) {\n          Howler._howls.splice(index, 1);\n        }\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      if (fn) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          if (fn === events[i].fn && id === events[i].id) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function() {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // don't move onto the next task until this one is done\n        self.once(task.event, function() {\n          self._queue.shift();\n          self._loadQueue();\n        });\n\n        task.action();\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        clearTimeout(self._endTimers[id]);\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop;\n      }\n      sound._node.bufferSource.playbackRate.value = sound._rate;\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n\n      if (self._scratchBuffer) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        try { node.bufferSource.buffer = self._scratchBuffer; } catch(e) {}\n      }\n      node.bufferSource = null;\n\n      return self;\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._muted = parent._muted;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else {\n        self._node = new Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = 'auto';\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._muted = parent._muted;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorListener, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.responseType = 'arraybuffer';\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Decode the buffer into an audio source.\n    Howler.ctx.decodeAudioData(arraybuffer, function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      }\n    }, function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    });\n  };\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.value = 1;\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (true) {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Define globally in case AMD is not available or unused.\n  if (typeof window !== 'undefined') {\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  } else if (typeof global !== 'undefined') { // Add to global in Node.js (for testing, etc).\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.0.3\n *  howlerjs.com\n *\n *  (c) 2013-2017, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n  \n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n      self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n      self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              sound._panner.setPosition(pan, 0, 0);\n            } else {\n              sound._panner.pan.value = pan;\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or\n   * all in the group. The most common usage is to set the 'x' position for\n   * left/right panning. Setting any value higher than 1.0 will begin to\n   * decrease the volume of the sound as it moves further away.\n   * @param  {Number} x  The x-position of the audio from -1000.0 to 1000.0.\n   * @param  {Number} y  The y-position of the audio from -1000.0 to 1000.0.\n   * @param  {Number} z  The z-position of the audio from -1000.0 to 1000.0.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            sound._panner.setPosition(x, y, z);\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            sound._panner.setOrientation(x, y, z);\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) There will be no volume reduction inside this angle.\n   *     coneOuterAngle - (360 by default) The volume will be reduced to a constant value of\n   *                      `coneOuterGain` outside this angle.\n   *     coneOuterGain - (0 by default) The amount of volume reduction outside of `coneOuterAngle`.\n   *     distanceModel - ('inverse' by default) Determines algorithm to use to reduce volume as audio moves\n   *                      away from listener. Can be `linear`, `inverse` or `exponential`.\n   *     maxDistance - (10000 by default) Volume won't reduce between source/listener beyond this distance.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *     refDistance - (1 by default) A reference distance for reducing volume as the source\n   *                    moves away from the listener.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener.\n   * \n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : self._distanceModel,\n            maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : self._maxDistance,\n            panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : self._panningModel,\n            refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : self._refDistance,\n            rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : self._rolloffFactor\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.panningModel = pa.panningModel;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.value = sound._stereo;\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id);\n    }\n  };\n})();\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar joshuatree_1 = __webpack_require__(12);\r\nvar THREE = __webpack_require__(0);\r\nvar maxNum = new joshuatree_1.Uint64([0xFFFFFFFF, 0xFFFFFFFF]);\r\nvar zeroNum = new joshuatree_1.Uint64([0, 0]);\r\nvar highBit = 0x800000;\r\n// Max depth at which there are workable tree nodes\r\nvar maxDepth = 1;\r\n// Which level of node to store combined meshes at\r\nvar depthToStoreMeshes = 1;\r\n// [TODO] refactor jtree to use RTT to detect leaf nodes instead of max depth\r\n// [TODO] add defines for common 64 bit ints to Uint64\r\nvar JTreeIterationData = (function () {\r\n    function JTreeIterationData() {\r\n        this.position = new THREE.Vector3();\r\n    }\r\n    return JTreeIterationData;\r\n}());\r\nexports.JTreeIterationData = JTreeIterationData;\r\nvar JTreeEntity = (function (_super) {\r\n    __extends(JTreeEntity, _super);\r\n    function JTreeEntity(material) {\r\n        var _this = _super.call(this) || this;\r\n        _this.material = material;\r\n        _this.mergedGeometry = [];\r\n        _this.mergedMeshes = [];\r\n        // bind self to spawn functions, since they are passed around\r\n        _this.spawnMergeCubes = _this.spawnMergeCubes.bind(_this);\r\n        return _this;\r\n    }\r\n    JTreeEntity.prototype.generateJTree = function () {\r\n        this.jtree = new joshuatree_1.JoshuaTree();\r\n        this.generateJTree_internal(this.jtree, 0);\r\n    };\r\n    JTreeEntity.prototype.generateJTree_internal = function (root, depth) {\r\n        if (depth > maxDepth) {\r\n            return;\r\n        }\r\n        for (var i = 0; i < 64; ++i) {\r\n            if (i % 2 === 1) {\r\n                var jchild = new joshuatree_1.JoshuaTree();\r\n                root.Add(i, jchild);\r\n                this.generateJTree_internal(jchild, depth + 1);\r\n            }\r\n        }\r\n    };\r\n    JTreeEntity.prototype.generateJTreeSphere = function (center, radius) {\r\n        this.jtree = new joshuatree_1.JoshuaTree();\r\n        this.generateJTreeSphere_internal(center, radius, this.jtree, new THREE.Vector3(0, 0, 0), 0);\r\n    };\r\n    JTreeEntity.prototype.pointWithinSphere = function (center, radius, point) {\r\n        var dvec = new THREE.Vector3().copy(point);\r\n        dvec = dvec.sub(center);\r\n        var distance = dvec.length();\r\n        return distance <= radius;\r\n    };\r\n    JTreeEntity.prototype.calculateCorners = function (corner, extent) {\r\n        var corners = [];\r\n        var center = new THREE.Vector3().copy(corner).add(new THREE.Vector3(extent, extent, extent));\r\n        var cornerRUF = new THREE.Vector3().copy(center);\r\n        cornerRUF.add(new THREE.Vector3(extent, extent, extent));\r\n        corners.push(cornerRUF);\r\n        var cornerLUF = new THREE.Vector3().copy(center);\r\n        cornerLUF.add(new THREE.Vector3(-extent, extent, extent));\r\n        corners.push(cornerLUF);\r\n        var cornerRDF = new THREE.Vector3().copy(center);\r\n        cornerRDF.add(new THREE.Vector3(extent, -extent, extent));\r\n        corners.push(cornerRDF);\r\n        var cornerLDF = new THREE.Vector3().copy(center);\r\n        cornerLDF.add(new THREE.Vector3(-extent, -extent, extent));\r\n        corners.push(cornerLDF);\r\n        var cornerRUB = new THREE.Vector3().copy(center);\r\n        cornerRUB.add(new THREE.Vector3(extent, extent, -extent));\r\n        corners.push(cornerRUB);\r\n        var cornerLUB = new THREE.Vector3().copy(center);\r\n        cornerLUB.add(new THREE.Vector3(-extent, extent, -extent));\r\n        corners.push(cornerLUB);\r\n        var cornerRDB = new THREE.Vector3().copy(center);\r\n        cornerRDB.add(new THREE.Vector3(extent, -extent, -extent));\r\n        corners.push(cornerRDB);\r\n        var cornerLDB = new THREE.Vector3().copy(center);\r\n        cornerLDB.add(new THREE.Vector3(-extent, -extent, -extent));\r\n        corners.push(cornerLDB);\r\n        return corners;\r\n    };\r\n    JTreeEntity.prototype.generateJTreeSphere_internal = function (center, radius, root, rootPosition, depth) {\r\n        var _this = this;\r\n        var childVoxExtent = this.getScaledExtent(depth + 1);\r\n        if (depth > maxDepth) {\r\n            return;\r\n        }\r\n        var _loop_1 = function (i) {\r\n            var voxCorner = new THREE.Vector3().copy(rootPosition).add(this_1.indexToScaledRelativePosition(i, depth));\r\n            var corners = this_1.calculateCorners(voxCorner, childVoxExtent);\r\n            var voxCenter = new THREE.Vector3().copy(voxCorner);\r\n            voxCenter.add(new THREE.Vector3(childVoxExtent, childVoxExtent, childVoxExtent));\r\n            var totallyWithinSphere = true;\r\n            var totallyOutsideSphere = true;\r\n            corners.forEach(function (currentValue, index, array) {\r\n                if (_this.pointWithinSphere(center, radius, currentValue)) {\r\n                    totallyOutsideSphere = false;\r\n                }\r\n                else {\r\n                    totallyWithinSphere = false;\r\n                }\r\n            });\r\n            // [TODO] Check if the sphere is within the vox\r\n            if (!totallyOutsideSphere) {\r\n                if (totallyWithinSphere) {\r\n                    var jchild = new joshuatree_1.JoshuaTree();\r\n                    jchild.Copy(maxNum);\r\n                    root.Add(i, jchild);\r\n                }\r\n                else {\r\n                    var jchild = new joshuatree_1.JoshuaTree();\r\n                    root.Add(i, jchild);\r\n                    this_1.generateJTreeSphere_internal(center, radius, jchild, voxCorner, depth + 1);\r\n                }\r\n            }\r\n        };\r\n        var this_1 = this;\r\n        for (var i = 0; i < 64; ++i) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    // take a depth, give back the scaled extent for that level\r\n    // and since we have cubes, a single extent will do\r\n    // extents are the distance from the center to a side\r\n    // ASSUMPTION, the deepest depth of the tree has an extent of 0.5\r\n    JTreeEntity.prototype.getScaledExtent = function (depth) {\r\n        var scalePower = (maxDepth + 1) - depth;\r\n        return Math.pow(4, scalePower) / 2;\r\n    };\r\n    // take the index of which bit a voxel is in\r\n    // returns an un-scaled position (doesn't account for depth)\r\n    JTreeEntity.prototype.indexToRelativePosition = function (index) {\r\n        return new THREE.Vector3(index % 4, Math.floor(index / 4) % 4, Math.floor(index / 16));\r\n    };\r\n    JTreeEntity.prototype.indexToScaledRelativePosition = function (index, depth) {\r\n        var scalePower = maxDepth - depth;\r\n        var relPos = this.indexToRelativePosition(index);\r\n        relPos.x *= Math.pow(4, scalePower);\r\n        relPos.y *= Math.pow(4, scalePower);\r\n        relPos.z *= Math.pow(4, scalePower);\r\n        return relPos;\r\n    };\r\n    // [TODO] refactor this function to use a foreach loop only over existing elements\r\n    JTreeEntity.prototype.leafLoop = function (fn, node, depth, offset) {\r\n        for (var i = 0; i < 64; ++i) {\r\n            var bitFlag = new joshuatree_1.Uint64();\r\n            bitFlag.Set(i);\r\n            // extents of maxdepths children\r\n            var minExtent = this.getScaledExtent(depth);\r\n            if (!node.And(bitFlag).Empty()) {\r\n                var data = new JTreeIterationData();\r\n                data.position.copy(offset);\r\n                data.position.add(this.indexToRelativePosition(i));\r\n                data.position.add(new THREE.Vector3(minExtent, minExtent, minExtent));\r\n                data.extent = minExtent;\r\n                data.depth = depth;\r\n                data.nodeParent = node;\r\n                data.nodeKey = i;\r\n                fn(data);\r\n            }\r\n        }\r\n    };\r\n    JTreeEntity.prototype.depthLoop = function (fn, node, depth, offset, targetNodeList) {\r\n        var _this = this;\r\n        if (depth > maxDepth) {\r\n            return;\r\n        }\r\n        if (targetNodeList !== undefined) {\r\n            var shouldTraverseNode_1 = false;\r\n            var heirKey_1 = this.getHeirarchyIndexByNode(node);\r\n            targetNodeList.map(function (value) {\r\n                // heirKey for this node is equal to a target value\r\n                //  or heir key is for a child of target value\r\n                shouldTraverseNode_1 = shouldTraverseNode_1 || ((heirKey_1 & value) === value);\r\n            });\r\n            if (!shouldTraverseNode_1) {\r\n                return;\r\n            }\r\n        }\r\n        var voxExtent = this.getScaledExtent(depth);\r\n        if (node.Equals(maxNum)) {\r\n            // Render a large cube\r\n            var data = new JTreeIterationData();\r\n            data.position.copy(offset);\r\n            data.position.add(new THREE.Vector3(voxExtent, voxExtent, voxExtent));\r\n            data.extent = voxExtent;\r\n            data.nodeRef = node;\r\n            data.nodeParent = node.parent;\r\n            data.nodeKey = node.key;\r\n            data.depth = depth;\r\n            fn(data);\r\n        }\r\n        else if (node.Equals(zeroNum)) {\r\n            // Skip this branch\r\n        }\r\n        else {\r\n            // Recurse or render leaf loop\r\n            if (depth === maxDepth) {\r\n                this.leafLoop(fn, node, depth + 1, offset);\r\n            }\r\n            else {\r\n                // Call depth node on each child\r\n                Object.keys(node.children).forEach(function (childKey) {\r\n                    var child = node.children[childKey];\r\n                    if (child instanceof joshuatree_1.JoshuaTree) {\r\n                        var toff = new THREE.Vector3().copy(offset);\r\n                        var keynum = parseInt(childKey, 10);\r\n                        _this.depthLoop(fn, child, depth + 1, toff.add(_this.indexToScaledRelativePosition(keynum, depth)));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n    JTreeEntity.prototype.spawnMergeCubes = function (data) {\r\n        var newGeometry = new THREE.BoxGeometry(data.extent * 2, data.extent * 2, data.extent * 2);\r\n        var newGeomTransform = new THREE.Matrix4().makeTranslation(data.position.x, data.position.y, data.position.z);\r\n        var myMeshIndex = this.getHeirarchyIndexByIndexAndParent(data.nodeKey, data.nodeParent, depthToStoreMeshes);\r\n        if (this.mergedGeometry[myMeshIndex] === undefined) {\r\n            this.mergedGeometry[myMeshIndex] = new THREE.Geometry();\r\n        }\r\n        this.mergedGeometry[myMeshIndex].merge(newGeometry, newGeomTransform);\r\n    };\r\n    JTreeEntity.prototype.spawnCubes = function () {\r\n        var _this = this;\r\n        this.depthLoop(this.spawnMergeCubes, this.jtree, 0, new THREE.Vector3(0, 0, 0));\r\n        this.mergedGeometry.forEach(function (value, index) {\r\n            _this.mergedMeshes[index] = new THREE.Mesh(value, _this.material);\r\n            _this.add(_this.mergedMeshes[index]);\r\n        });\r\n    };\r\n    JTreeEntity.prototype.calculateCenterOfMass = function () {\r\n        var centerOfMass = new THREE.Vector3(0, 0, 0);\r\n        var totalMass = 0;\r\n        this.depthLoop(function (data) {\r\n            // Calculate mass assuming uniform density\r\n            // [IDEA] give voxels non-uniform density values,\r\n            //      and manipulate them when explosions 'n stuff happen\r\n            var density = 1;\r\n            var sideLen = data.extent * 2;\r\n            var volume = sideLen * sideLen * sideLen;\r\n            var mass = density * volume;\r\n            var weightedPos = new THREE.Vector3().copy(data.position).multiplyScalar(mass);\r\n            centerOfMass.add(weightedPos);\r\n            totalMass += mass;\r\n        }, this.jtree, 0, this.position);\r\n        // normalize weights of vectors\r\n        centerOfMass.divideScalar(totalMass);\r\n        return centerOfMass;\r\n    };\r\n    JTreeEntity.prototype.getHeirarchyIndexByIndexAndParent = function (index, parentNode, maxdepth) {\r\n        if (maxdepth === void 0) { maxdepth = 4; }\r\n        var key = index << 3;\r\n        var node = parentNode;\r\n        for (var i = 1; i < maxDepth && node && node.parent; ++i) {\r\n            var shifted = node.key << 3;\r\n            key = key >> 1;\r\n            key &= shifted;\r\n        }\r\n        return key;\r\n    };\r\n    // [WARN] will have trouble with depths > 4\r\n    JTreeEntity.prototype.getHeirarchyIndexByNode = function (node, maxdepth) {\r\n        if (maxdepth === void 0) { maxdepth = 4; }\r\n        var key = 0;\r\n        for (var i = 0; i < maxDepth && node && node.parent; ++i) {\r\n            var shifted = node.key << 3;\r\n            key = key >> 1;\r\n            key &= shifted;\r\n        }\r\n        return key;\r\n    };\r\n    JTreeEntity.prototype.detachSubtreeSphere = function (center, radius) {\r\n        // [TODO] separate a subtree and return it\r\n        //      [ITR.1.1] split large chunks\r\n        //      [ITR.2] separate subtree, destroy it\r\n        //      [ITR.3] separate subtree, give it a velocity and spin\r\n        //      [ITR.4] separate subtree, fragment it (sub- separations)\r\n        var _this = this;\r\n        var indicesToRerasterize = [];\r\n        this.depthLoop(function (data) {\r\n            var localCenter = new THREE.Vector3().copy(data.position);\r\n            var deltaVec = localCenter.sub(center);\r\n            var distance = deltaVec.length();\r\n            if (distance <= radius) {\r\n                var nodeParent = data.nodeParent;\r\n                nodeParent.Remove(data.nodeKey);\r\n                var heirInd = _this.getHeirarchyIndexByIndexAndParent(data.nodeKey, nodeParent, depthToStoreMeshes);\r\n                if (!indicesToRerasterize.includes(heirInd)) {\r\n                    indicesToRerasterize.push(heirInd);\r\n                }\r\n            }\r\n        }, this.jtree, 0, this.position);\r\n        console.log(indicesToRerasterize);\r\n        // Clean out the merged mesh\r\n        //this.remove(this.mergedMesh);\r\n        //delete this.mergedMesh;\r\n        // [SLOW] Repopulate the jtree from scratch\r\n        //this.spawnCubes();\r\n    };\r\n    return JTreeEntity;\r\n}(THREE.Object3D));\r\nexports.default = JTreeEntity;\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar THREE = __webpack_require__(0);\r\nvar input_1 = __webpack_require__(11);\r\nvar soundfx_1 = __webpack_require__(13);\r\nvar CinematicController = (function () {\r\n    function CinematicController(camera) {\r\n        this.camera = camera;\r\n        this.cameraInitialPos = new THREE.Vector3().copy(new THREE.Vector3(0, 3, 10));\r\n        this.camera.position.copy(this.cameraInitialPos);\r\n        this.camSwayVerticalSpeed = 3.14159 * 0.1;\r\n        this.camSwayVerticalMagnitude = 0.2;\r\n        this.camSwayHorizontalSpeed = 3.14159 * 0.3;\r\n        this.camSwayHorizontalMagnitude = 0.03;\r\n        this.camSwayTime = 0;\r\n        this.inputSound = new soundfx_1.default('./sfx/sacktap.wav');\r\n    }\r\n    CinematicController.prototype.tick = function (dt) {\r\n        if (input_1.keys[' '])\r\n            this.inputSound.play();\r\n        this.camSwayTime += dt;\r\n        var newPosition = new THREE.Vector3().copy(this.cameraInitialPos);\r\n        newPosition.add(new THREE.Vector3(Math.sin(this.camSwayTime * this.camSwayHorizontalSpeed) * this.camSwayHorizontalMagnitude, Math.sin(this.camSwayTime * this.camSwayVerticalSpeed) * this.camSwayVerticalMagnitude, 0));\r\n        this.camera.position.copy(newPosition);\r\n    };\r\n    return CinematicController;\r\n}());\r\nexports.default = CinematicController;\r\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar vox_1 = __webpack_require__(1);\r\nvar THREE = __webpack_require__(0);\r\nvar rand = function () {\r\n    return Math.random() - 0.5;\r\n};\r\nvar Ai = (function (_super) {\r\n    __extends(Ai, _super);\r\n    function Ai(data) {\r\n        var _this = _super.call(this, data) || this;\r\n        _this.clock = new THREE.Clock();\r\n        _this.newTarget();\r\n        _this.tick();\r\n        return _this;\r\n    }\r\n    Ai.prototype.newTarget = function () {\r\n        this.lerp = 0;\r\n        this.target = new THREE.Vector3(rand() * this.data.distance, 0, rand() * this.data.distance);\r\n    };\r\n    Ai.prototype.tick = function () {\r\n        var delta = this.clock.getDelta();\r\n        this.lerp += delta * this.data.speed;\r\n        this.position.lerp(this.target, this.lerp);\r\n        this.lookAt(this.target);\r\n        if (this.lerp >= 1) {\r\n            this.newTarget();\r\n        }\r\n        requestAnimationFrame(this.tick.bind(this));\r\n    };\r\n    return Ai;\r\n}(vox_1.default));\r\nexports.default = Ai;\r\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\nmodule.exports    = {\n\t\"default\": \"idle\",\n\t\"size\": 0.06,\n\t\"animation\": {\n\t\t\"idle\": {\n\t\t\t\"speed\": 1000,\n\t\t\t\"vox\": [\n\t\t\t\t\"characters/player/chr_idle.vox\"\n\t\t\t]\n\t\t},\n\t\t\"walk\": {\n\t\t\t\"speed\": 100,\n\t\t\t\"vox\": [\n\t\t\t\t\"characters/player/chr_walkcycle-00.vox\",\n\t\t\t\t\"characters/player/chr_walkcycle-01.vox\",\n\t\t\t\t\"characters/player/chr_walkcycle-02.vox\",\n\t\t\t\t\"characters/player/chr_walkcycle-03.vox\",\n\t\t\t\t\"characters/player/chr_walkcycle-04.vox\",\n\t\t\t\t\"characters/player/chr_walkcycle-05.vox\"\n\t\t\t]\n\t\t}\n\t}\n}\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\nmodule.exports    = {\n\t\"default\": \"idle\",\n\t\"size\": 0.05,\n\t\"distance\": 10,\n\t\"speed\": 0.1,\n\t\"animation\": {\n\t\t\"idle\": {\n\t\t\t\"speed\": 100,\n\t\t\t\"vox\": [\n\t\t\t\t\"characters/b_dinosaur/1.vox\",\n\t\t\t\t\"characters/b_dinosaur/2.vox\",\n\t\t\t\t\"characters/b_dinosaur/3.vox\",\n\t\t\t\t\"characters/b_dinosaur/4.vox\",\n\t\t\t\t\"characters/b_dinosaur/5.vox\",\n\t\t\t\t\"characters/b_dinosaur/6.vox\",\n\t\t\t\t\"characters/b_dinosaur/7.vox\",\n\t\t\t\t\"characters/b_dinosaur/8.vox\"\n\t\t\t]\n\t\t}\n\t}\n}\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\nmodule.exports    = {\n\t\"default\": \"idle\",\n\t\"size\": 0.08,\n\t\"position\": [\n\t\t1.5,\n\t\t0.5,\n\t\t-0.4\n\t],\n\t\"rotation\": [\n\t\t0,\n\t\t0,\n\t\t25\n\t],\n\t\"animation\": {\n\t\t\"idle\": {\n\t\t\t\"speed\": 100,\n\t\t\t\"vox\": [\n\t\t\t\t\"characters/dinosaur/dino_1.vox\",\n\t\t\t\t\"characters/dinosaur/dino_2.vox\"\n\t\t\t]\n\t\t}\n\t}\n}\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports) {\n\nmodule.exports    = {\n\t\"type\": \"Ranged\",\n\t\"default\": \"idle\",\n\t\"size\": 0.2,\n\t\"position\": [\n\t\t5,\n\t\t-0.2,\n\t\t0\n\t],\n\t\"rotation\": [\n\t\t0,\n\t\t-90,\n\t\t0\n\t],\n\t\"animation\": {\n\t\t\"idle\": {\n\t\t\t\"time\": 100000,\n\t\t\t\"vox\": [\n\t\t\t\t\"thebonezone.vox\"\n\t\t\t]\n\t\t}\n\t}\n}\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar JTreeEntity_1 = __webpack_require__(3);\r\nvar cinematiccontroller_1 = __webpack_require__(4);\r\nvar THREE = __webpack_require__(0);\r\nvar vox_1 = __webpack_require__(1);\r\nvar Howl = __webpack_require__(2);\r\nvar ai_1 = __webpack_require__(5);\r\nvar charData = __webpack_require__(6);\r\nvar testLevel = __webpack_require__(9);\r\nvar dinoMite = __webpack_require__(7);\r\nvar dinostrip = new vox_1.default(__webpack_require__(8));\r\nvar scene = new THREE.Scene();\r\nwindow.scene = scene;\r\nvar camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\nvar renderer = new THREE.WebGLRenderer({ antialias: true });\r\nrenderer.setSize(window.innerWidth, window.innerHeight);\r\ndocument.body.appendChild(renderer.domElement);\r\nvar controls;\r\nvar clock = new THREE.Clock();\r\ncamera.position.z = 10;\r\ncamera.position.y = 2;\r\nvar uniforms = {\r\n    color: { value: new THREE.Vector4(0, 1, 0, 1) },\r\n};\r\nvar material = new THREE.MeshPhongMaterial({ color: 0xFFFF00 });\r\nvar sphereCenter = new THREE.Vector3(5, 5, 5);\r\nvar sphereRadius = 4;\r\nvar jtree = new JTreeEntity_1.default(material);\r\njtree.position.copy(new THREE.Vector3(-4, 10, -40));\r\njtree.generateJTreeSphere(sphereCenter, sphereRadius);\r\njtree.spawnCubes();\r\nvar character = new vox_1.default(charData);\r\ncontrols = new cinematiccontroller_1.default(camera);\r\nvar makeDinoMite = function () {\r\n    var o3d = new ai_1.default(dinoMite);\r\n    o3d.position.set(Math.random() * 2, 0, Math.random() * 2);\r\n    scene.add(o3d);\r\n};\r\nvar x = 0;\r\nwhile (x < 10) {\r\n    x++;\r\n    makeDinoMite();\r\n}\r\nscene.add(dinostrip);\r\nscene.add(new vox_1.default(testLevel));\r\nscene.add(jtree);\r\nvar light = new THREE.DirectionalLight();\r\nlight.castShadow = true;\r\nscene.add(light);\r\nscene.add(new THREE.AmbientLight());\r\nvar direction = 1;\r\nvar soundFired = false;\r\nvar sound = new Howl.Howl({\r\n    src: ['./sfx/sacktap.wav'],\r\n    onend: function () {\r\n        soundFired = false;\r\n    },\r\n});\r\nvar music = new Howl.Howl({\r\n    src: ['./sfx/Flaming Atoms.mp3'],\r\n});\r\nmusic.loop(true);\r\nmusic.play();\r\nvar render = function () {\r\n    requestAnimationFrame(render);\r\n    var delta = clock.getDelta();\r\n    controls.tick(delta);\r\n    renderer.render(scene, camera);\r\n};\r\nrender();\r\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\ndocument.addEventListener('keyup', function (e) {\r\n    exports.keys[e.keyCode] = false;\r\n    exports.keys[e.key] = false;\r\n});\r\ndocument.addEventListener('keydown', function (e) {\r\n    exports.keys[e.keyCode] = true;\r\n    exports.keys[e.key] = true;\r\n});\r\ndocument.addEventListener('mousemove', function (e) {\r\n    exports.mouse.x = e.clientX;\r\n    exports.mouse.y = e.clientY;\r\n    var w = window.innerWidth;\r\n    var h = window.innerHeight;\r\n    exports.mouse.xp = exports.mouse.x / w - .5;\r\n    exports.mouse.yp = exports.mouse.y / h - .5;\r\n});\r\ndocument.addEventListener('mousedown', function (e) {\r\n    exports.mouse.left = true;\r\n});\r\ndocument.addEventListener('mouseup', function (e) {\r\n    exports.mouse.left = false;\r\n});\r\nexports.keys = {};\r\nexports.mouse = {\r\n    x: 0,\r\n    y: 0,\r\n    xp: 0,\r\n    yp: 0,\r\n    left: false,\r\n    right: false,\r\n};\r\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Uint64 = (function () {\r\n    function Uint64(data) {\r\n        if (data === void 0) { data = [0, 0]; }\r\n        this.data = new Uint32Array(data);\r\n    }\r\n    Uint64.prototype.Copy = function (from) {\r\n        this.data[0] = from.data[0];\r\n        this.data[1] = from.data[1];\r\n        return this;\r\n    };\r\n    Uint64.prototype.Xor = function (target) {\r\n        return new Uint64([this.data[0] ^ target.data[0], this.data[1] ^ target.data[1]]);\r\n    };\r\n    Uint64.prototype.Not = function () {\r\n        return new Uint64([~this.data[0], ~this.data[1]]);\r\n    };\r\n    Uint64.prototype.Or = function (target) {\r\n        return new Uint64([this.data[0] | target.data[0], this.data[1] | target.data[1]]);\r\n    };\r\n    Uint64.prototype.And = function (target) {\r\n        return new Uint64([this.data[0] & target.data[0], this.data[1] & target.data[1]]);\r\n    };\r\n    Uint64.prototype.Unset = function (location) {\r\n        if (location > 31) {\r\n            location -= 32;\r\n            this.data[1] &= (1 << location);\r\n        }\r\n        else {\r\n            this.data[0] &= (1 << location);\r\n        }\r\n        return this;\r\n    };\r\n    Uint64.prototype.Set = function (location) {\r\n        if (location > 31) {\r\n            location -= 32;\r\n            this.data[1] |= (1 << location);\r\n        }\r\n        else {\r\n            this.data[0] |= (1 << location);\r\n        }\r\n        return this;\r\n    };\r\n    Uint64.prototype.Empty = function () {\r\n        return this.data[0] === 0 && this.data[1] === 0;\r\n    };\r\n    Uint64.prototype.Equals = function (target) {\r\n        return target.data[0] === this.data[0] && target.data[1] === this.data[1];\r\n    };\r\n    return Uint64;\r\n}());\r\nexports.Uint64 = Uint64;\r\nvar JoshuaTree = (function (_super) {\r\n    __extends(JoshuaTree, _super);\r\n    function JoshuaTree() {\r\n        var _this = _super.call(this) || this;\r\n        _this.children = {};\r\n        return _this;\r\n    }\r\n    JoshuaTree.prototype.FromJSON = function (json, treeClass) {\r\n        var _this = this;\r\n        if (treeClass === void 0) { treeClass = JoshuaTree; }\r\n        this.parent = json.parent;\r\n        Object.keys(json.children).forEach(function (key) {\r\n            var child = json['children'][key];\r\n            var numKey = parseInt(key, 10);\r\n            child = child.children ? new treeClass().FromJSON(child) : child;\r\n            _this.Add(numKey, child);\r\n        });\r\n        return this;\r\n    };\r\n    JoshuaTree.prototype.Remove = function (key) {\r\n        if (this.children[key]) {\r\n            var child = this.children[key];\r\n            this.Copy(this.Xor(new Uint64().Set(key)));\r\n            if (child instanceof JoshuaTree) {\r\n                delete child.parent;\r\n                delete child.key;\r\n            }\r\n            delete this.children[key];\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    JoshuaTree.prototype.ToJSON = function () {\r\n        return JSON.stringify(this);\r\n    };\r\n    JoshuaTree.prototype.Add = function (key, child, force) {\r\n        if (!this.children[key]) {\r\n            this.children[key] = child;\r\n            if (child instanceof JoshuaTree) {\r\n                child.parent = this;\r\n                child.key = key;\r\n            }\r\n            this.Copy(this.Or(new Uint64().Set(key)));\r\n            return true;\r\n        }\r\n        else if (force) {\r\n            this.Remove(key);\r\n            this.Add(key, child);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    JoshuaTree.prototype.ForEach = function (fn, key) {\r\n        var _this = this;\r\n        fn(this, key);\r\n        Object.keys(this.children).forEach(function (childKey) {\r\n            var child = _this.children[childKey];\r\n            if (child instanceof JoshuaTree) {\r\n                child.ForEach(fn, childKey);\r\n            }\r\n        });\r\n    };\r\n    return JoshuaTree;\r\n}(Uint64));\r\nexports.JoshuaTree = JoshuaTree;\r\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar howler_1 = __webpack_require__(2);\r\nvar SoundFX = (function () {\r\n    function SoundFX(path) {\r\n        var _this = this;\r\n        this.sfx = new howler_1.Howl({\r\n            src: [path],\r\n            onend: function () {\r\n                _this.playing = false;\r\n            },\r\n        });\r\n        this.playing = false;\r\n    }\r\n    SoundFX.prototype.play = function () {\r\n        if (!this.playing) {\r\n            this.playing = true;\r\n            this.sfx.play();\r\n        }\r\n    };\r\n    SoundFX.prototype.stop = function () {\r\n        if (this.playing) {\r\n            this.sfx.stop();\r\n        }\r\n    };\r\n    return SoundFX;\r\n}());\r\nexports.default = SoundFX;\r\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)))\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports) {\n\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9ff512ce1e30683e25ef","module.exports = THREE;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"THREE\"\n// module id = 0\n// module chunks = 0","import * as path from 'path';\r\nimport * as THREE from 'three';\r\n\r\ndeclare const vox: any;\r\n\r\nconst parser = new vox.Parser();\r\n\r\nexport interface IAnimation {\r\n    speed: number;\r\n    vox: string[];\r\n}\r\n\r\nexport interface IVoxData {\r\n    animation: {[key: string]: IAnimation};\r\n    size?: number;\r\n    rotation?: number[];\r\n    position?: number[];\r\n    default: string;\r\n}\r\n\r\nexport default class VoxModel extends THREE.Object3D {\r\n    data: IVoxData;\r\n    animations: any;\r\n    current: string;\r\n    frame: number;\r\n    timeout: number;\r\n    voxHolder: THREE.Object3D;\r\n\r\n    constructor(voxData: IVoxData) {\r\n        super();\r\n        this.data = voxData;\r\n        const dir = './vox';\r\n        this.animations = {};\r\n\r\n        Object.keys(this.data.animation).forEach(key => {\r\n            const anim: IAnimation = this.data.animation[key];\r\n\r\n            this.animations[key] = {\r\n                ...anim,\r\n                vox: anim.vox.map(file => parser.parse(path.join(dir, file)).then(voxelBin => {\r\n                    const builder = new vox.MeshBuilder(voxelBin, { voxelSize: voxData.size });\r\n                    const mesh = builder.createMesh();\r\n                    mesh.castShadow = true;\r\n                    mesh.receiveShadow = true;\r\n                    return mesh;\r\n                })),\r\n            };\r\n        });\r\n        this.voxHolder = new THREE.Object3D();\r\n        if(voxData.position)\r\n            this.voxHolder.position.fromArray(voxData.position);\r\n\r\n        if(voxData.rotation)\r\n            this.voxHolder.rotation.fromArray(voxData.rotation.map(x => x * Math.PI/180));\r\n\r\n        this.add(this.voxHolder);\r\n        this.play(this.data.default);\r\n    }\r\n\r\n    play(animation: string) {\r\n        if(this.timeout) clearInterval(this.timeout);\r\n\r\n        this.current = animation;\r\n        this.frame = 0;\r\n\r\n        this.timeout = setInterval(this.step.bind(this), this.animations[animation].speed);\r\n    }\r\n\r\n    stop() {\r\n        clearTimeout(this.timeout);\r\n    }\r\n\r\n    async step() {\r\n        if(this.voxHolder.children[0])\r\n            this.voxHolder.remove(this.voxHolder.children[0]);\r\n\r\n        const voxList = this.animations[this.current].vox;\r\n        const mesh = await voxList[this.frame];\r\n        this.voxHolder.add(mesh);\r\n\r\n        this.frame = this.frame + 1 === voxList.length ? this.frame = 0 : this.frame + 1;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/o3d/vox.ts","/*!\n *  howler.js v2.0.3\n *  howlerjs.com\n *\n *  (c) 2013-2017, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 0;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto iOS enabler.\n      self.mobileAutoEnable = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.value = vol;\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.value = muted ? 0 : self._volume;\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'running' : 'running';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!audioTest.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Mobile browsers will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _enableMobileAudio: function() {\n      var self = this || Howler;\n\n      // Only run this on mobile devices if audio isn't already eanbled.\n      var isMobile = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(self._navigator && self._navigator.userAgent);\n      var isTouch = !!(('ontouchend' in window) || (self._navigator && self._navigator.maxTouchPoints > 0) || (self._navigator && self._navigator.msMaxTouchPoints > 0));\n      if (self._mobileEnabled || !self.ctx || (!isMobile && !isTouch)) {\n        return;\n      }\n\n      self._mobileEnabled = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function() {\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._mobileEnabled = true;\n          self.mobileAutoEnable = false;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchend', unlock, true);\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchend', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n        self.ctx.suspend().then(function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        });\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended') {\n        self.state = 'resuming';\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio on iOS.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.mobileAutoEnable) {\n        Howler._enableMobileAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload) {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        var num = 0;\n        for (var i=0; i<self._sounds.length; i++) {\n          if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n            num++;\n            id = self._sounds[i]._id;\n          }\n        }\n\n        if (num === 1) {\n          sprite = null;\n        } else {\n          id = null;\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If we have no sprite and the sound hasn't loaded, we must wait\n      // for the sound to load to get our audio's duration.\n      if (self._state !== 'loaded' && !self._sprite[sprite]) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(self._soundById(sound._id) ? sound._id : undefined);\n          }\n        });\n\n        return sound._id;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          setTimeout(function() {\n            self._emit('play', sound._id);\n          }, 0);\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n      // Update the parameters of the sound\n      sound._paused = false;\n      sound._ended = false;\n      sound._sprite = sprite;\n      sound._seek = seek;\n      sound._start = self._sprite[sprite][0] / 1000;\n      sound._stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n            }, 0);\n          }\n        };\n\n        var isRunning = (Howler.state === 'running');\n        if (self._state === 'loaded' && isRunning) {\n          playWebAudio();\n        } else {\n          // Wait for the audio to load and then begin playback.\n          var event = !isRunning && self._state === 'loaded' ? 'resume' : 'load';\n          self.once(event, playWebAudio, isRunning ? sound._id : null);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n          node.play();\n\n          // Setup the new end timer.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            self._emit('play', sound._id);\n          }\n        };\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (self._state === 'loaded' && (window && window.ejecta || !node.readyState && Howler._navigator.isCocoonJS));\n        if (node.readyState === 4 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // make sure the sound has been created\n              if (!sound._node.bufferSource) {\n                return self;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // make sure the sound has been created\n              if (!sound._node.bufferSource) {\n                if (!internal) {\n                  self._emit('stop', sound._id);\n                }\n\n                return self;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n            }\n          }\n        }\n\n        if (sound && !internal) {\n          self._emit('stop', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded') {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n      var diff = Math.abs(from - to);\n      var dir = from > to ? 'out' : 'in';\n      var steps = diff / 0.01;\n      var stepLen = (steps > 0) ? len / steps : len;\n\n      // Since browsers clamp timeouts to 4ms, we need to clamp our steps to that too.\n      if (stepLen < 4) {\n        steps = Math.ceil(steps / (4 / stepLen));\n        stepLen = 4;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          var vol = from;\n          sound._interval = setInterval(function(soundId, sound) {\n            // Update the volume amount, but only if the volume should change.\n            if (steps > 0) {\n              vol += (dir === 'in' ? 0.01 : -0.01);\n            }\n\n            // Make sure the volume is in the right bounds.\n            vol = Math.max(0, vol);\n            vol = Math.min(1, vol);\n\n            // Round to within 2 decimal points.\n            vol = Math.round(vol * 100) / 100;\n\n            // Change the volume.\n            if (self._webAudio) {\n              if (typeof id === 'undefined') {\n                self._volume = vol;\n              }\n\n              sound._volume = vol;\n            } else {\n              self.volume(vol, soundId, true);\n            }\n\n            // When the fade is complete, stop it and fire event.\n            if ((to < from && vol <= to) || (to > from && vol >= to)) {\n              clearInterval(sound._interval);\n              sound._interval = null;\n              self.volume(to, soundId);\n              self._emit('fade', soundId);\n            }\n          }.bind(self, ids[i], sound), stepLen);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded') {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            sound._rateSeek = self.seek(id[i]);\n            sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.value = rate;\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (self._state !== 'loaded') {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Restart the playback if the sound was playing.\n          if (playing) {\n            self.play(id, true);\n          }\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node) {\n            sound._node.currentTime = seek;\n          }\n\n          self._emit('seek', id);\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading.\n          sounds[i]._node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n\n        // Remove the references in the global Howler object.\n        var index = Howler._howls.indexOf(self);\n        if (index >= 0) {\n          Howler._howls.splice(index, 1);\n        }\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      if (fn) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          if (fn === events[i].fn && id === events[i].id) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function() {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // don't move onto the next task until this one is done\n        self.once(task.event, function() {\n          self._queue.shift();\n          self._loadQueue();\n        });\n\n        task.action();\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        clearTimeout(self._endTimers[id]);\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop;\n      }\n      sound._node.bufferSource.playbackRate.value = sound._rate;\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n\n      if (self._scratchBuffer) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        try { node.bufferSource.buffer = self._scratchBuffer; } catch(e) {}\n      }\n      node.bufferSource = null;\n\n      return self;\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._muted = parent._muted;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else {\n        self._node = new Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = 'auto';\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._muted = parent._muted;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorListener, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.responseType = 'arraybuffer';\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Decode the buffer into an audio source.\n    Howler.ctx.decodeAudioData(arraybuffer, function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      }\n    }, function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    });\n  };\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && Howler._navigator.standalone && !safari || Howler._navigator && !Howler._navigator.standalone && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.value = 1;\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Define globally in case AMD is not available or unused.\n  if (typeof window !== 'undefined') {\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  } else if (typeof global !== 'undefined') { // Add to global in Node.js (for testing, etc).\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.0.3\n *  howlerjs.com\n *\n *  (c) 2013-2017, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n  \n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n      self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n      self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              sound._panner.setPosition(pan, 0, 0);\n            } else {\n              sound._panner.pan.value = pan;\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or\n   * all in the group. The most common usage is to set the 'x' position for\n   * left/right panning. Setting any value higher than 1.0 will begin to\n   * decrease the volume of the sound as it moves further away.\n   * @param  {Number} x  The x-position of the audio from -1000.0 to 1000.0.\n   * @param  {Number} y  The y-position of the audio from -1000.0 to 1000.0.\n   * @param  {Number} z  The z-position of the audio from -1000.0 to 1000.0.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            sound._panner.setPosition(x, y, z);\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            sound._panner.setOrientation(x, y, z);\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) There will be no volume reduction inside this angle.\n   *     coneOuterAngle - (360 by default) The volume will be reduced to a constant value of\n   *                      `coneOuterGain` outside this angle.\n   *     coneOuterGain - (0 by default) The amount of volume reduction outside of `coneOuterAngle`.\n   *     distanceModel - ('inverse' by default) Determines algorithm to use to reduce volume as audio moves\n   *                      away from listener. Can be `linear`, `inverse` or `exponential`.\n   *     maxDistance - (10000 by default) Volume won't reduce between source/listener beyond this distance.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *     refDistance - (1 by default) A reference distance for reducing volume as the source\n   *                    moves away from the listener.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener.\n   * \n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : self._distanceModel,\n            maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : self._maxDistance,\n            panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : self._panningModel,\n            refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : self._refDistance,\n            rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : self._rolloffFactor\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.panningModel = pa.panningModel;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.value = sound._stereo;\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id);\n    }\n  };\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/howler/dist/howler.js\n// module id = 2\n// module chunks = 0","import {Uint64, JoshuaTree} from './engine/joshuatree';\r\nimport * as THREE from 'three';\r\n\r\nconst maxNum: Uint64 = new Uint64([0xFFFFFFFF, 0xFFFFFFFF]);\r\nconst zeroNum: Uint64 = new Uint64([0, 0]);\r\nconst highBit: number = 0x800000;\r\n\r\n// Max depth at which there are workable tree nodes\r\nconst maxDepth = 1;\r\n\r\n// Which level of node to store combined meshes at\r\nconst depthToStoreMeshes = 1;\r\n\r\n// [TODO] refactor jtree to use RTT to detect leaf nodes instead of max depth\r\n// [TODO] add defines for common 64 bit ints to Uint64\r\nexport class JTreeIterationData {\r\n       position: THREE.Vector3;\r\n       depth: number;\r\n       extent: number;\r\n       nodeKey: number;\r\n       nodeRef: JoshuaTree;\r\n       nodeParent: JoshuaTree;\r\n\r\n       constructor() {\r\n           this.position = new THREE.Vector3();\r\n       }\r\n}\r\n\r\nexport default class JTreeEntity extends THREE.Object3D {\r\n\r\n    jtree: JoshuaTree;\r\n\r\n    // for mesh combining impl\r\n    material: THREE.Material;\r\n    // Key in this array is d0Key.d1Key.d2Key...\r\n    //  for as deep as necessary to hold up to 'depthToStoreMeshes'\r\n    mergedGeometry: THREE.Geometry[];\r\n    mergedMeshes: THREE.Mesh[];\r\n\r\n    constructor(material: THREE.Material) {\r\n        super();\r\n\r\n        this.material = material;\r\n        this.mergedGeometry = [];\r\n        this.mergedMeshes = [];\r\n\r\n        // bind self to spawn functions, since they are passed around\r\n        this.spawnMergeCubes = this.spawnMergeCubes.bind(this);\r\n    }\r\n\r\n    generateJTree() {\r\n        this.jtree = new JoshuaTree();\r\n        this.generateJTree_internal(this.jtree, 0);\r\n    }\r\n    generateJTree_internal(root: JoshuaTree, depth: number) {\r\n        if(depth > maxDepth) {\r\n            return;\r\n        }\r\n\r\n        for(let i = 0; i < 64; ++i) {\r\n            if(i%2 === 1) {\r\n                const jchild = new JoshuaTree();\r\n                root.Add(i, jchild);\r\n                this.generateJTree_internal(jchild, depth + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    generateJTreeSphere(center: THREE.Vector3, radius: number) {\r\n        this.jtree = new JoshuaTree();\r\n        this.generateJTreeSphere_internal(center, radius, this.jtree, new THREE.Vector3(0, 0, 0), 0);\r\n    }\r\n    pointWithinSphere(center: THREE.Vector3, radius: number, point: THREE.Vector3): boolean {\r\n        let dvec = new THREE.Vector3().copy(point);\r\n        dvec = dvec.sub(center);\r\n        const distance = dvec.length();\r\n\r\n        return distance <= radius;\r\n    }\r\n    calculateCorners(corner: THREE.Vector3, extent: number): THREE.Vector3[] {\r\n        const corners = [];\r\n\r\n        const center = new THREE.Vector3().copy(corner).add(new THREE.Vector3(extent, extent, extent));\r\n\r\n        const cornerRUF = new THREE.Vector3().copy(center);\r\n        cornerRUF.add(new THREE.Vector3(extent, extent, extent));\r\n        corners.push(cornerRUF);\r\n        const cornerLUF = new THREE.Vector3().copy(center);\r\n        cornerLUF.add(new THREE.Vector3(-extent, extent, extent));\r\n        corners.push(cornerLUF);\r\n        const cornerRDF = new THREE.Vector3().copy(center);\r\n        cornerRDF.add(new THREE.Vector3(extent, -extent, extent));\r\n        corners.push(cornerRDF);\r\n        const cornerLDF = new THREE.Vector3().copy(center);\r\n        cornerLDF.add(new THREE.Vector3(-extent, -extent, extent));\r\n        corners.push(cornerLDF);\r\n        const cornerRUB = new THREE.Vector3().copy(center);\r\n        cornerRUB.add(new THREE.Vector3(extent, extent, -extent));\r\n        corners.push(cornerRUB);\r\n        const cornerLUB = new THREE.Vector3().copy(center);\r\n        cornerLUB.add(new THREE.Vector3(-extent, extent, -extent));\r\n        corners.push(cornerLUB);\r\n        const cornerRDB = new THREE.Vector3().copy(center);\r\n        cornerRDB.add(new THREE.Vector3(extent, -extent, -extent));\r\n        corners.push(cornerRDB);\r\n        const cornerLDB = new THREE.Vector3().copy(center);\r\n        cornerLDB.add(new THREE.Vector3(-extent, -extent, -extent));\r\n        corners.push(cornerLDB);\r\n\r\n        return corners;\r\n    }\r\n    generateJTreeSphere_internal(center: THREE.Vector3, radius: number, root: JoshuaTree,\r\n                                 rootPosition: THREE.Vector3, depth: number) {\r\n        const childVoxExtent = this.getScaledExtent(depth + 1);\r\n\r\n        if(depth > maxDepth) {\r\n            return;\r\n        }\r\n\r\n        for(let i = 0; i < 64; ++i) {\r\n            const voxCorner = new THREE.Vector3().copy(rootPosition).add(this.indexToScaledRelativePosition(i, depth));\r\n            const corners = this.calculateCorners(voxCorner, childVoxExtent);\r\n            const voxCenter = new THREE.Vector3().copy(voxCorner);\r\n            voxCenter.add(new THREE.Vector3(childVoxExtent, childVoxExtent, childVoxExtent));\r\n\r\n            let totallyWithinSphere = true;\r\n            let totallyOutsideSphere = true;\r\n            corners.forEach((currentValue: THREE.Vector3, index: number, array: THREE.Vector3[]) => {\r\n                if(this.pointWithinSphere(center, radius, currentValue)) {\r\n                    totallyOutsideSphere = false;\r\n                }else {\r\n                    totallyWithinSphere = false;\r\n                }\r\n            });\r\n\r\n            // [TODO] Check if the sphere is within the vox\r\n\r\n            if(!totallyOutsideSphere) {\r\n                if(totallyWithinSphere) {\r\n                    const jchild = new JoshuaTree();\r\n                    jchild.Copy(maxNum);\r\n                    root.Add(i, jchild);\r\n                } else {\r\n\r\n                    const jchild = new JoshuaTree();\r\n                    root.Add(i, jchild);\r\n\r\n                    this.generateJTreeSphere_internal(center, radius, jchild, voxCorner, depth + 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // take a depth, give back the scaled extent for that level\r\n    // and since we have cubes, a single extent will do\r\n    // extents are the distance from the center to a side\r\n    // ASSUMPTION, the deepest depth of the tree has an extent of 0.5\r\n    getScaledExtent(depth: number) {\r\n        const scalePower = (maxDepth + 1) - depth;\r\n        return Math.pow(4, scalePower) / 2;\r\n    }\r\n\r\n    // take the index of which bit a voxel is in\r\n    // returns an un-scaled position (doesn't account for depth)\r\n    indexToRelativePosition(index: number) {\r\n        return new THREE.Vector3(index % 4, Math.floor(index / 4) % 4, Math.floor(index / 16));\r\n    }\r\n\r\n    indexToScaledRelativePosition(index: number, depth: number): THREE.Vector3 {\r\n        const scalePower = maxDepth - depth;\r\n        const relPos = this.indexToRelativePosition(index);\r\n\r\n        relPos.x *= Math.pow(4, scalePower);\r\n        relPos.y *= Math.pow(4, scalePower);\r\n        relPos.z *= Math.pow(4, scalePower);\r\n\r\n        return relPos;\r\n    }\r\n\r\n    // [TODO] refactor this function to use a foreach loop only over existing elements\r\n    leafLoop(fn: (data: JTreeIterationData) => void ,node: JoshuaTree, depth: number, offset: THREE.Vector3) {\r\n        for(let i = 0; i < 64; ++i) {\r\n            const bitFlag = new Uint64();\r\n            bitFlag.Set(i);\r\n\r\n            // extents of maxdepths children\r\n            const minExtent = this.getScaledExtent(depth);\r\n\r\n            if(!node.And(bitFlag).Empty()) {\r\n                const data = new JTreeIterationData();\r\n                data.position.copy(offset);\r\n                data.position.add(this.indexToRelativePosition(i));\r\n                data.position.add(new THREE.Vector3(minExtent, minExtent, minExtent));\r\n                data.extent = minExtent;\r\n                data.depth = depth;\r\n                data.nodeParent = node;\r\n                data.nodeKey = i;\r\n                fn(data);\r\n            }\r\n        }\r\n    }\r\n\r\n    depthLoop(fn: (data: JTreeIterationData) => void,\r\n              node: JoshuaTree, depth: number, offset: THREE.Vector3, targetNodeList?: number[]) {\r\n        if(depth > maxDepth) {\r\n            return;\r\n        }\r\n\r\n        if(targetNodeList !== undefined) {\r\n            let shouldTraverseNode = false;\r\n            const heirKey = this.getHeirarchyIndexByNode(node);\r\n            targetNodeList.map((value: number) => {\r\n                // heirKey for this node is equal to a target value\r\n                //  or heir key is for a child of target value\r\n                shouldTraverseNode = shouldTraverseNode || ((heirKey & value) === value);\r\n            });\r\n\r\n            if(!shouldTraverseNode) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        const voxExtent = this.getScaledExtent(depth);\r\n\r\n        if(node.Equals(maxNum)) {\r\n            // Render a large cube\r\n            const data = new JTreeIterationData();\r\n            data.position.copy(offset);\r\n            data.position.add(new THREE.Vector3(voxExtent, voxExtent, voxExtent));\r\n            data.extent = voxExtent;\r\n            data.nodeRef = node;\r\n            data.nodeParent = node.parent;\r\n            data.nodeKey = node.key;\r\n            data.depth = depth;\r\n            fn(data);\r\n        } else if(node.Equals(zeroNum) ) {\r\n            // Skip this branch\r\n        } else {\r\n            // Recurse or render leaf loop\r\n            if(depth === maxDepth ) {\r\n                this.leafLoop(fn, node, depth + 1, offset);\r\n            } else {\r\n                // Call depth node on each child\r\n                Object.keys(node.children).forEach((childKey: string) => {\r\n                    const child = node.children[childKey];\r\n                    if(child instanceof JoshuaTree) {\r\n                        const toff = new THREE.Vector3().copy(offset);\r\n                        const keynum = parseInt(childKey, 10);\r\n\r\n                        this.depthLoop(fn, child, depth + 1,\r\n                         toff.add(this.indexToScaledRelativePosition(keynum, depth)));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    spawnMergeCubes(data: JTreeIterationData) {\r\n        const newGeometry = new THREE.BoxGeometry( data.extent * 2, data.extent * 2, data.extent * 2);\r\n        const newGeomTransform = new THREE.Matrix4().makeTranslation(data.position.x, data.position.y, data.position.z);\r\n\r\n        const myMeshIndex = this.getHeirarchyIndexByIndexAndParent(data.nodeKey, data.nodeParent, depthToStoreMeshes);\r\n        if(this.mergedGeometry[myMeshIndex] === undefined) {\r\n            this.mergedGeometry[myMeshIndex] = new THREE.Geometry();\r\n        }\r\n\r\n        this.mergedGeometry[myMeshIndex].merge(newGeometry, newGeomTransform);\r\n    }\r\n\r\n    spawnCubes() {\r\n        this.depthLoop(this.spawnMergeCubes, this.jtree, 0, new THREE.Vector3(0, 0, 0));\r\n\r\n        this.mergedGeometry.forEach((value: THREE.Geometry, index: number) => {\r\n            this.mergedMeshes[index] = new THREE.Mesh(value, this.material);\r\n            this.add(this.mergedMeshes[index]);\r\n        });\r\n    }\r\n\r\n    calculateCenterOfMass(): THREE.Vector3 {\r\n        const centerOfMass = new THREE.Vector3(0, 0, 0);\r\n        let totalMass = 0;\r\n        this.depthLoop((data: JTreeIterationData)=> {\r\n            // Calculate mass assuming uniform density\r\n            // [IDEA] give voxels non-uniform density values,\r\n            //      and manipulate them when explosions 'n stuff happen\r\n            const density = 1;\r\n            const sideLen = data.extent * 2;\r\n            const volume = sideLen * sideLen * sideLen;\r\n            const mass = density * volume;\r\n\r\n            const weightedPos = new THREE.Vector3().copy(data.position).multiplyScalar(mass);\r\n            centerOfMass.add(weightedPos);\r\n            totalMass += mass;\r\n        }, this.jtree, 0, this.position);\r\n\r\n        // normalize weights of vectors\r\n        centerOfMass.divideScalar(totalMass);\r\n\r\n        return centerOfMass;\r\n    }\r\n\r\n    getHeirarchyIndexByIndexAndParent(index: number, parentNode: JoshuaTree, maxdepth: number = 4) {\r\n        let key = index << 3;\r\n        const node = parentNode;\r\n        for(let i = 1; i < maxDepth && node && node.parent; ++i) {\r\n            const shifted = node.key << 3;\r\n            key = key >> 1;\r\n            key &= shifted;\r\n        }\r\n\r\n        return key;\r\n    }\r\n\r\n    // [WARN] will have trouble with depths > 4\r\n    getHeirarchyIndexByNode(node: JoshuaTree, maxdepth: number = 4) {\r\n        let key = 0;\r\n        for(let i = 0; i < maxDepth && node && node.parent; ++i) {\r\n            const shifted = node.key << 3;\r\n            key = key >> 1;\r\n            key &= shifted;\r\n        }\r\n\r\n        return key;\r\n    }\r\n\r\n    detachSubtreeSphere(center: THREE.Vector3, radius: number): void {\r\n        // [TODO] separate a subtree and return it\r\n        //      [ITR.1.1] split large chunks\r\n        //      [ITR.2] separate subtree, destroy it\r\n        //      [ITR.3] separate subtree, give it a velocity and spin\r\n        //      [ITR.4] separate subtree, fragment it (sub- separations)\r\n\r\n        const indicesToRerasterize = [];\r\n\r\n        this.depthLoop((data: JTreeIterationData)=> {\r\n            const localCenter = new THREE.Vector3().copy(data.position);\r\n            const deltaVec = localCenter.sub(center);\r\n\r\n            const distance = deltaVec.length();\r\n\r\n            if(distance <= radius) {\r\n                const nodeParent = data.nodeParent;\r\n                nodeParent.Remove(data.nodeKey);\r\n\r\n                const heirInd = this.getHeirarchyIndexByIndexAndParent(data.nodeKey, nodeParent, depthToStoreMeshes);\r\n                if(!indicesToRerasterize.includes(heirInd)) {\r\n                    indicesToRerasterize.push(heirInd);\r\n                }\r\n            }\r\n\r\n        }, this.jtree, 0, this.position);\r\n\r\n        console.log(indicesToRerasterize);\r\n\r\n        // Clean out the merged mesh\r\n        //this.remove(this.mergedMesh);\r\n        //delete this.mergedMesh;\r\n\r\n        // [SLOW] Repopulate the jtree from scratch\r\n        //this.spawnCubes();\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/JTreeEntity.ts","import * as THREE from 'three';\r\nimport {keys, mouse} from './engine/input';\r\nimport SoundFX from './soundfx';\r\n\r\nexport default class CinematicController {\r\n    camera: THREE.Camera;\r\n    inputSound: SoundFX;\r\n    cameraInitialPos: THREE.Vector3;\r\n\r\n    // in rads/sex\r\n    camSwayVerticalSpeed: number;\r\n    camSwayVerticalMagnitude: number;\r\n    camSwayHorizontalSpeed: number;\r\n    camSwayHorizontalMagnitude: number;\r\n    camSwayTime: number;\r\n\r\n    constructor(camera) {\r\n        this.camera = camera;\r\n        this.cameraInitialPos = new THREE.Vector3().copy(new THREE.Vector3(0, 3, 10));\r\n        this.camera.position.copy(this.cameraInitialPos);\r\n\r\n        this.camSwayVerticalSpeed = 3.14159 * 0.1;\r\n        this.camSwayVerticalMagnitude = 0.2;\r\n        this.camSwayHorizontalSpeed = 3.14159 * 0.3;\r\n        this.camSwayHorizontalMagnitude = 0.03;\r\n\r\n        this.camSwayTime = 0;\r\n        this.inputSound = new SoundFX('./sfx/sacktap.wav');\r\n    }\r\n\r\n    tick(dt: number) {\r\n        if(keys[' ']) this.inputSound.play();\r\n\r\n        this.camSwayTime += dt;\r\n\r\n        const newPosition = new THREE.Vector3().copy(this.cameraInitialPos);\r\n        newPosition.add(new THREE.Vector3(\r\n            Math.sin(this.camSwayTime * this.camSwayHorizontalSpeed) * this.camSwayHorizontalMagnitude,\r\n            Math.sin(this.camSwayTime * this.camSwayVerticalSpeed) * this.camSwayVerticalMagnitude,\r\n            0,\r\n        ));\r\n\r\n        this.camera.position.copy(newPosition);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/cinematiccontroller.ts","import Vox, {IAnimation, IVoxData} from './vox';\r\nimport * as THREE from 'three';\r\n\r\ninterface IAIData extends IVoxData {\r\n    distance: number;\r\n    speed: number;\r\n}\r\n\r\nconst rand = () => {\r\n    return Math.random() - 0.5;\r\n};\r\n\r\nexport default class Ai extends Vox {\r\n    data: IAIData;\r\n    count: number;\r\n    clock: THREE.Clock;\r\n    target: THREE.Vector3;\r\n    lerp: number;\r\n\r\n    constructor(data: IAIData) {\r\n        super(data);\r\n        this.clock = new THREE.Clock();\r\n        this.newTarget();\r\n\r\n        this.tick();\r\n    }\r\n\r\n    newTarget() {\r\n        this.lerp = 0;\r\n        this.target = new THREE.Vector3(\r\n            rand() * this.data.distance,\r\n            0,\r\n            rand() * this.data.distance,\r\n        );\r\n    }\r\n    tick() {\r\n        const delta = this.clock.getDelta();\r\n\r\n        this.lerp += delta * this.data.speed;\r\n        this.position.lerp(this.target, this.lerp);\r\n        this.lookAt(this.target);\r\n\r\n        if(this.lerp >= 1) {\r\n            this.newTarget();\r\n        }\r\n\r\n        requestAnimationFrame(this.tick.bind(this));\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/o3d/ai.ts","module.exports    = {\n\t\"default\": \"idle\",\n\t\"size\": 0.06,\n\t\"animation\": {\n\t\t\"idle\": {\n\t\t\t\"speed\": 1000,\n\t\t\t\"vox\": [\n\t\t\t\t\"characters/player/chr_idle.vox\"\n\t\t\t]\n\t\t},\n\t\t\"walk\": {\n\t\t\t\"speed\": 100,\n\t\t\t\"vox\": [\n\t\t\t\t\"characters/player/chr_walkcycle-00.vox\",\n\t\t\t\t\"characters/player/chr_walkcycle-01.vox\",\n\t\t\t\t\"characters/player/chr_walkcycle-02.vox\",\n\t\t\t\t\"characters/player/chr_walkcycle-03.vox\",\n\t\t\t\t\"characters/player/chr_walkcycle-04.vox\",\n\t\t\t\t\"characters/player/chr_walkcycle-05.vox\"\n\t\t\t]\n\t\t}\n\t}\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/content/character/character.toml\n// module id = 6\n// module chunks = 0","module.exports    = {\n\t\"default\": \"idle\",\n\t\"size\": 0.05,\n\t\"distance\": 10,\n\t\"speed\": 0.1,\n\t\"animation\": {\n\t\t\"idle\": {\n\t\t\t\"speed\": 100,\n\t\t\t\"vox\": [\n\t\t\t\t\"characters/b_dinosaur/1.vox\",\n\t\t\t\t\"characters/b_dinosaur/2.vox\",\n\t\t\t\t\"characters/b_dinosaur/3.vox\",\n\t\t\t\t\"characters/b_dinosaur/4.vox\",\n\t\t\t\t\"characters/b_dinosaur/5.vox\",\n\t\t\t\t\"characters/b_dinosaur/6.vox\",\n\t\t\t\t\"characters/b_dinosaur/7.vox\",\n\t\t\t\t\"characters/b_dinosaur/8.vox\"\n\t\t\t]\n\t\t}\n\t}\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/content/character/dinomite.toml\n// module id = 7\n// module chunks = 0","module.exports    = {\n\t\"default\": \"idle\",\n\t\"size\": 0.08,\n\t\"position\": [\n\t\t1.5,\n\t\t0.5,\n\t\t-0.4\n\t],\n\t\"rotation\": [\n\t\t0,\n\t\t0,\n\t\t25\n\t],\n\t\"animation\": {\n\t\t\"idle\": {\n\t\t\t\"speed\": 100,\n\t\t\t\"vox\": [\n\t\t\t\t\"characters/dinosaur/dino_1.vox\",\n\t\t\t\t\"characters/dinosaur/dino_2.vox\"\n\t\t\t]\n\t\t}\n\t}\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/content/character/dinostrip.toml\n// module id = 8\n// module chunks = 0","module.exports    = {\n\t\"type\": \"Ranged\",\n\t\"default\": \"idle\",\n\t\"size\": 0.2,\n\t\"position\": [\n\t\t5,\n\t\t-0.2,\n\t\t0\n\t],\n\t\"rotation\": [\n\t\t0,\n\t\t-90,\n\t\t0\n\t],\n\t\"animation\": {\n\t\t\"idle\": {\n\t\t\t\"time\": 100000,\n\t\t\t\"vox\": [\n\t\t\t\t\"thebonezone.vox\"\n\t\t\t]\n\t\t}\n\t}\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/content/testlevel.toml\n// module id = 9\n// module chunks = 0","import JTreeEntity from './JTreeEntity';\r\nimport ThirdPersonController from './thirdpersoncontroller';\r\nimport FlyCharacter from './FlyCharacter';\r\nimport CinematicController from './cinematiccontroller';\r\nimport * as THREE from 'three';\r\nimport Vox from './o3d/vox';\r\nimport {keys, mouse} from './engine/input';\r\nimport * as Howl from 'howler';\r\nimport AI from './o3d/ai';\r\n\r\ninterface IGameWindow extends Window {\r\n    scene: THREE.Scene;\r\n}\r\n\r\ndeclare const window: IGameWindow;\r\n\r\nconst charData = require('./content/character/character.toml');\r\nconst testLevel = require('./content/testlevel.toml');\r\nconst dinoMite = require('./content/character/dinomite.toml');\r\nconst dinostrip = new Vox(require('./content/character/dinostrip.toml'));\r\n\r\nconst scene = new THREE.Scene();\r\n\r\nwindow.scene = scene;\r\nconst camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\r\n\r\nconst renderer = new THREE.WebGLRenderer({ antialias: true });\r\nrenderer.setSize( window.innerWidth, window.innerHeight );\r\ndocument.body.appendChild( renderer.domElement );\r\n\r\nlet controls: CinematicController;\r\nconst clock = new THREE.Clock();\r\n\r\ncamera.position.z = 10;\r\ncamera.position.y = 2;\r\n\r\nconst uniforms = {\r\n    color: {value: new THREE.Vector4(0, 1, 0, 1)},\r\n};\r\n\r\nconst material = new THREE.MeshPhongMaterial( {color: 0xFFFF00} );\r\n\r\nconst sphereCenter = new THREE.Vector3(5, 5, 5);\r\nconst sphereRadius = 4;\r\nconst jtree = new JTreeEntity(material);\r\n\r\njtree.position.copy(new THREE.Vector3(-4, 10, -40));\r\njtree.generateJTreeSphere(sphereCenter, sphereRadius);\r\njtree.spawnCubes();\r\n\r\nconst character = new Vox(charData);\r\ncontrols = new CinematicController(camera);\r\n\r\nconst makeDinoMite = () => {\r\n    const o3d = new AI(dinoMite);\r\n    o3d.position.set(Math.random() * 2, 0, Math.random() * 2);\r\n    scene.add(o3d);\r\n};\r\n\r\nlet x = 0;\r\nwhile(x < 10) {\r\n    x++;\r\n    makeDinoMite();\r\n}\r\n\r\nscene.add(dinostrip);\r\nscene.add(new Vox(testLevel));\r\nscene.add(jtree);\r\nconst light = new THREE.DirectionalLight();\r\nlight.castShadow = true;\r\nscene.add(light);\r\nscene.add(new THREE.AmbientLight());\r\n\r\nconst direction = 1;\r\n\r\nlet soundFired = false;\r\nconst sound = new Howl.Howl({\r\n  src: ['./sfx/sacktap.wav'],\r\n  onend: () => {\r\n    soundFired = false;\r\n  },\r\n});\r\n\r\nconst music = new Howl.Howl({\r\n  src: ['./sfx/Flaming Atoms.mp3'],\r\n});\r\n\r\nmusic.loop(true);\r\nmusic.play();\r\n\r\nconst render = () => {\r\n    requestAnimationFrame(render);\r\n    const delta = clock.getDelta();\r\n    controls.tick(delta);\r\n\r\n    renderer.render(scene, camera);\r\n};\r\n\r\nrender();\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","document.addEventListener('keyup', (e) => {\r\n    keys[e.keyCode] = false;\r\n    keys[e.key] = false;\r\n});\r\n\r\ndocument.addEventListener('keydown', (e) => {\r\n    keys[e.keyCode] = true;\r\n    keys[e.key] = true;\r\n});\r\n\r\ndocument.addEventListener('mousemove', e => {\r\n    mouse.x = e.clientX;\r\n    mouse.y = e.clientY;\r\n\r\n    const w = window.innerWidth;\r\n    const h = window.innerHeight;\r\n\r\n    mouse.xp = mouse.x / w - .5;\r\n    mouse.yp = mouse.y / h - .5;\r\n});\r\n\r\ndocument.addEventListener('mousedown', e => {\r\n    mouse.left = true;\r\n});\r\n\r\ndocument.addEventListener('mouseup', e => {\r\n    mouse.left = false;\r\n});\r\n\r\nexport const keys: {[key: string]: boolean} = {};\r\nexport const mouse = {\r\n    x: 0,\r\n    y: 0,\r\n    xp: 0,\r\n    yp: 0,\r\n    left: false,\r\n    right: false,\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/input.ts","export class Uint64 {\r\n    data: Uint32Array;\r\n\r\n    constructor(data: number[] = [0, 0]) {\r\n        this.data = new Uint32Array(data);\r\n    }\r\n\r\n    Copy(from: Uint64): Uint64 {\r\n        this.data[0] = from.data[0];\r\n        this.data[1] = from.data[1];\r\n        return this;\r\n    }\r\n\r\n    Xor(target: Uint64): Uint64 {\r\n         return new Uint64([this.data[0] ^ target.data[0], this.data[1] ^ target.data[1]]);\r\n    }\r\n\r\n    Not(): Uint64 {\r\n        return new Uint64([~this.data[0], ~this.data[1]]);\r\n    }\r\n\r\n    Or(target: Uint64): Uint64 {\r\n        return new Uint64([this.data[0] | target.data[0], this.data[1] | target.data[1]]);\r\n    }\r\n\r\n    And(target: Uint64): Uint64 {\r\n        return new Uint64([this.data[0] & target.data[0], this.data[1] & target.data[1]]);\r\n    }\r\n\r\n    Unset(location: number): Uint64 {\r\n        if(location > 31) {\r\n            location -= 32;\r\n            this.data[1] &= (1 << location);\r\n        } else {\r\n            this.data[0] &= (1 << location);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    Set(location: number): Uint64 {\r\n        if(location > 31) {\r\n            location -= 32;\r\n            this.data[1] |= (1 << location);\r\n        } else {\r\n            this.data[0] |= (1 << location);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    Empty(): boolean {\r\n        return this.data[0] === 0 && this.data[1] === 0;\r\n    }\r\n\r\n    Equals(target: Uint64): boolean {\r\n        return target.data[0] === this.data[0] && target.data[1] === this.data[1];\r\n    }\r\n}\r\n\r\nexport class JoshuaTree extends Uint64 {\r\n    children: {[key: string]: JoshuaTree | any};\r\n    parent: JoshuaTree;\r\n    key: number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.children = {};\r\n    }\r\n\r\n    FromJSON(json: any, treeClass: any = JoshuaTree): JoshuaTree {\r\n        this.parent = json.parent;\r\n        Object.keys(json.children).forEach(key => {\r\n            let child = json['children'][key];\r\n            const numKey = parseInt(key, 10);\r\n            child = child.children ? new treeClass().FromJSON(child) : child;\r\n            this.Add(numKey, child);\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    Remove(key: number): boolean {\r\n        if(this.children[key]) {\r\n            const child = this.children[key];\r\n            this.Copy(this.Xor(new Uint64().Set(key)));\r\n            if(child instanceof JoshuaTree) {\r\n                delete child.parent;\r\n                delete child.key;\r\n            }\r\n            delete this.children[key];\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    ToJSON(): string {\r\n        return JSON.stringify(this);\r\n    }\r\n\r\n    Add(key: number, child: JoshuaTree | any, force?: boolean): boolean {\r\n        if(!this.children[key]) {\r\n            this.children[key] = child;\r\n            if(child instanceof JoshuaTree) {\r\n                child.parent = this;\r\n                child.key = key;\r\n            }\r\n            this.Copy(this.Or(new Uint64().Set(key)));\r\n            return true;\r\n        } else if(force) {\r\n            this.Remove(key);\r\n            this.Add(key, child);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    ForEach(fn: (node: JoshuaTree, key?: string) => void, key?: string) {\r\n        fn(this, key);\r\n\r\n        Object.keys(this.children).forEach((childKey: string) => {\r\n            const child = this.children[childKey];\r\n            if(child instanceof JoshuaTree) {\r\n                child.ForEach(fn, childKey);\r\n            }\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/joshuatree.ts","import {Howl} from 'howler';\r\n\r\nexport default class SoundFX {\r\n    sfx: Howl;\r\n    playing: boolean;\r\n\r\n    constructor(path: string) {\r\n        this.sfx = new Howl({\r\n            src: [path],\r\n            onend: () => {\r\n                this.playing = false;\r\n            },\r\n        });\r\n        this.playing = false;\r\n    }\r\n\r\n    play() {\r\n        if(!this.playing) {\r\n            this.playing = true;\r\n            this.sfx.play();\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        if(this.playing) {\r\n            this.sfx.stop();\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/soundfx.ts","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/path-browserify/index.js\n// module id = 14\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/process/browser.js\n// module id = 15\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 16\n// module chunks = 0"],"sourceRoot":""}